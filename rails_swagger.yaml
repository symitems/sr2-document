swagger: '2.0'
info:
  description: >-
    This is an API document for Symitems connections between React and Rails
    API.
  version: 1.0.0
  title: API document
  contact:
    name: symitems.info
    email: symitems.info@gmail.com
host: 'localhost:3001'
tags:
  - name: login
    description: Login API
  - name: schedules
    description: Operations about schedules
  - name: users
    description: Operations about users
schemes:
  - https
paths:
  /login:
    parameters:
      - $ref: "#/parameters/authorizationHeader"
    get:
      description: Validate the authorization-header, and get "user_id", "name" and "is_admin".
      summary: login
      operationId: loginUser
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/loginResponse"
        '401':
          $ref: "#/definitions/401"
      tags:
        - login
  /users:
    parameters:
      - $ref: "#/parameters/authorizationHeader"
    post:
      summary: Create new user
      tags:
        - users
      description: |
        Create a new user account.
        (Available only for administrators)
      operationId: createUser
      parameters:
        - $ref: "#/parameters/newUser"
      responses:
        '200':
          description: OK
        '400':
          $ref: "#/definitions/400"
        '401':
          $ref: "#/definitions/401"
        '403':
          $ref: "#/definitions/403"
    get:
      summary: GET all users
      description: |
        List all user accounts.
        (Available only for administrators)
      tags:
        - users
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/userList"
        '401':
          $ref: "#/definitions/401"
        '403':
          $ref: "#/definitions/403"
  /users/{user_id}:
    parameters:
      - $ref: "#/parameters/authorizationHeader"
      - type: string
        name: user_id
        in: path
        required: true
    patch:
      description: |
        Change an exsisting user account.
        (Available only for administrators)
      summary: UPDATE a user by user_id
      tags:
        - users
      operationId: updateUser
      responses:
        '200':
          description: OK
        '400':
          $ref: "#/definitions/400"
        '401':
          $ref: "#/definitions/401"
        '403':
          $ref: "#/definitions/403"
        '404':
          $ref: "#/definitions/404"
      parameters:
        - $ref: "#/parameters/updateUser"
    delete:
      summary: Delete an user by user_id
      description: |
        Delete user account.
        (Available only for administrators)
      tags:
        - users
      operationId: deleteUser
      responses:
        '200':
          description: OK
        '400':
          $ref: "#/definitions/400"
        '401':
          $ref: "#/definitions/401"
        '403':
          $ref: "#/definitions/403"
        '404':
          $ref: "#/definitions/404"
  /schedules:
    parameters:
      - $ref: "#/parameters/authorizationHeader"
    post:
      summary: Create a schedule
      operationId: insertSchedule
      description: |
        Create a new schedule.
        The created schedule is owned by the authorized user.
      tags:
        - schedules
      responses:
        '200':
          description: OK
        '400':
          $ref: "#/definitions/400"
        '401':
          $ref: "#/definitions/401"
        '404':
          $ref: "#/definitions/404"
      parameters:
        - $ref: "#/parameters/newSchedule"
  /schedules/{schedule_id}:
    parameters:
      - $ref: "#/parameters/authorizationHeader"
      - type: integer
        name: schedule_id
        in: path
        required: true
    put:
      summary: PUT a schedule by schedule_id
      description: |
        Change an exsisting schedule.
        Schedules of the authorized user can be changed.
      tags:
        - schedules
      operationId: updateSchedule
      responses:
        '200':
          description: OK
        '400':
          $ref: "#/definitions/400"
        '401':
          $ref: "#/definitions/401"
        '403':
          $ref: "#/definitions/403"
        '404':
          $ref: "#/definitions/404"
      parameters:
        - $ref: "#/parameters/newSchedule"
    delete:
      summary: DELETE a schedule by schedule_id
      description: |
        Delete an exsisting schedule.
        Schedules of the authorized user can be deleted.
      tags:
        - schedules
      operationId: deleteSchedule
      responses:
        '200':
          description: OK
        '400':
          $ref: "#/definitions/400"
        '401':
          $ref: "#/definitions/401"
        '403':
          $ref: "#/definitions/403"
        '404':
          $ref: "#/definitions/404"
  /schedules/{year}/{month}:
    parameters:
      - $ref: "#/parameters/authorizationHeader"
      - type: string
        name: year
        in: path
        required: true
      - type: string
        name: month
        in: path
        required: true
    get:
      summary: GET schedules by year/month
      description: |
        List schedules of authorized user.
        Schedules of the authorized user can be deleted.
      tags:
        - schedules
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/listSchedules"
        '400':
          $ref: "#/definitions/400"
        '401':
          $ref: "#/definitions/401"
        '403':
          $ref: "#/definitions/403"
        '404':
          $ref: "#/definitions/404"
      operationId: getSchedules

securityDefinitions:
  Authorization:
    type: basic
    description: ''
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
produces:
  - application/json
consumes:
  - application/json

parameters:
  authorizationHeader:
    type: string
    in: header
    required: true
    name: Authorization
    description: 'base64-encoded "email:password"'
  newSchedule:
    in: body
    name: bodystr
    required: true
    schema:
      type: object
      properties:
        date:
          type: string
        title:
          type: string
        started_at:
          type: string
        ended_at:
          type: string
        detail:
          type: string
      example:
        date: "20200714"
        title: "Yamaguro is still in Fukui."
        started_at: "1800"
        ended_at: "1830"
        detail: "I am in Fukui for anothor 1 year"
  newUser:
    in: body
    name: bodystr
    required: true
    schema:
      type: object
      properties:
        name:
          type: string
        is_admin:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - name
        - is_admin
        - email
        - password
      example:
        name: "yamaguro"
        is_admin: "false"
        email: "chirichirige@symitems.com"
        password: "chirichirige"
  updateUser:
    in: body
    name: bodystr
    required: true
    schema:
      type: object
      properties:
        name:
          type: string
        is_admin:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: "yamaguro"
        is_admin: "false"
        email: "chirichirige@symitems.com"
        password: "chirichirige"

definitions:
  '400':
    description: |
      Bad Request
  '401':
    description: |
      Unauthorized
      Authorization header is incorrect.
  '403':
    description: |
      Forbidden
      User doesn't have permission.
  '404':
    description: |
      Not Found
      Accessed resource does not exist.
  loginResponse:
    type: object
    properties:
      user_id:
        type: integer
        example: 1
      name:
        type: string
        example: "yamaguro"
      is_admin:
        type: boolean
        example: true
  scheduleWithId:
    type: object
    properties:
      schedule_id:
        type: integer
      date:
        type: string
      title:
        type: string
      started_at:
        type: string
      ended_at:
        type: string
      detail:
        type: string
    example:
      schedule_id: 96
      date: "20200714"
      example: "Yamaguro is still in Fukui."
      started_at: "1800"
      ended_at: "1830"
      detail: "I am in Fukui for anothor 1 year"
  listSchedules:
    items:
      type: array
      $ref: "#/definitions/scheduleWithId"
  userWithId:
    type: object
    properties:
      user_id:
        type: integer
      name:
        type: string
      is_admin:
        type: string
      email:
        type: string
      fails_count:
        type: integer
    example:
      user_id: 96
      name: "yamaguro"
      is_admin: "false"
      email: "chirichirige@symitems.com"
  userList:
    items:
      type: array
      $ref: "#/definitions/userWithId"
